version: 2

jobs:

  #
  # linux
  #

  test-3.9: &test-linux-template
    docker:
      - image: circleci/python:3.9

    steps:
      - checkout

      - restore_cache: &restore-cache-env
          key: v2-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ checksum "docs/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: &create-virtualenv
          name: Create virtual environment
          command: |
            python -m pip install virtualenv
            python -m virtualenv env

      - run: &install-requirements
          name: Install requirements
          command: |
            . env/bin/activate
            pip install -r requirements.txt -r tests/requirements.txt -r docs/requirements.txt
            pip install wheel twine

      - save_cache: &save-cache-env
          key: v2-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ checksum "docs/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}
          paths:
            - env

      - run: &build-extension
          name: Build extension
          command: env/bin/python setup.py build_ext --inplace

      - run: &build-package
          name: Build package
          command: env/bin/python setup.py sdist bdist_wheel

      - run: &run-python-tests
          name: Run Python tests
          command: env/bin/coverage run -m unittest discover

      - run: &upload-python-code-coverage
          name: Upload code coverage
          command: |
            . env/bin/activate
            codecov   # calls `coverage xml`, so we must activate venv

      - run: &run-cpp-tests
          name: Run C++ tests
          command: |
            . env/bin/activate
            make -C tests/ smoke

  test-3.8:
    <<: *test-linux-template
    docker:
      - image: circleci/python:3.8

  test-3.7:
    <<: *test-linux-template
    docker:
      - image: circleci/python:3.7

  test-3.6:
    <<: *test-linux-template
    docker:
      - image: circleci/python:3.6

  test-3.5:
    <<: *test-linux-template
    docker:
      - image: circleci/python:3.5

  #
  # macos
  #

  test-osx-3.9: &test-osx-template
    macos:
      xcode: "12.1.0"

    environment:
      PYTHON: 3.9.0

      # Force (lie about) macOS 10.9 binary compatibility.
      # Needed for properly versioned wheels.
      # See: https://github.com/MacPython/wiki/wiki/Spinning-wheels
      MACOSX_DEPLOYMENT_TARGET: 10.9

    steps:
      - checkout

      # install $PYTHON and cache it
      - run: &brew-install-pyenv
          name: Install pyenv
          command: HOMEBREW_NO_AUTO_UPDATE=1 brew install pyenv

      - restore_cache: &restore-cache-pyenv
          keys:
            - v2-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-12.1.0

      - run: &pyenv-install-python
          name: Install python
          command: pyenv install $PYTHON -s

      - run: &pyenv-set-system-python
          name: Set system python
          command: |
            pyenv global $PYTHON
            echo 'eval "$(pyenv init -)"' >> ~/.bash_profile

      - save_cache: &save-cache-pyenv
          key: v2-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-12.1.0
          paths:
            - ~/.pyenv

      # install dependencies and cache them
      - restore_cache: *restore-cache-env

      - run: *create-virtualenv

      - run: *install-requirements

      - save_cache: *save-cache-env

      - run: *build-extension

      - run: *build-package

      - run: *run-python-tests

      - run: *run-cpp-tests

  test-osx-3.8:
    <<: *test-osx-template
    environment:
      PYTHON: 3.8.1
      MACOSX_DEPLOYMENT_TARGET: 10.9

  test-osx-3.7:
    <<: *test-osx-template
    environment:
      PYTHON: 3.7.4
      MACOSX_DEPLOYMENT_TARGET: 10.9

  test-osx-3.6:
    <<: *test-osx-template
    environment:
      PYTHON: 3.6.5
      MACOSX_DEPLOYMENT_TARGET: 10.9

  test-osx-3.5:
    <<: *test-osx-template
    environment:
      PYTHON: 3.5.5
      MACOSX_DEPLOYMENT_TARGET: 10.9

  #
  # docs
  #

  test-docs:
    docker:
      - image: circleci/python:3.7

    steps:
      - checkout

      - restore_cache: *restore-cache-env

      - run: *create-virtualenv

      - run: *install-requirements

      - save_cache: *save-cache-env

      - run: *build-extension

      - run:
          name: Install package
          command: env/bin/pip install .

      - run: &build-docs
          name: Build docs
          command: |
            . env/bin/activate
            make -C docs/ html

      - store_artifacts: &save-docs
          path: ./docs/build/html

      - run: &run-doctest
          name: Test docs
          command: |
            . env/bin/activate
            make -C docs/ doctest

  #
  # deploy linux
  #

  deploy-manylinux-64: &deploy-manylinux-template
    docker:
      - image: quay.io/pypa/manylinux1_x86_64

    steps:
      - checkout

      - run:
          name: Build wheels
          command: |
            for PYBIN in /opt/python/*/bin; do
              "${PYBIN}/python" -c "import sys; sys.exit((3,5)<=sys.version_info<(3,10))" && continue
              "${PYBIN}/pip" install -r requirements.txt
              "${PYBIN}/pip" wheel . -w ./wheelhouse
              "${PYBIN}/python" setup.py sdist -d ./dist
            done

      - run:
          name: Bundle shared libraries into wheels
          command: |
            for whl in ./wheelhouse/dwave*greedy*.whl; do
              auditwheel repair "$whl" -w ./dist
            done

      - store_artifacts:
          path: dist

      - run:
          name: Create virtual environment
          command: |
            pythons=(/opt/python/*/bin)
            python="${pythons[0]}"
            "$python/pip" install virtualenv
            "$python/python" -m virtualenv env

      - run: &upload-template
          name: Install twine and deploy
          command: |
            env/bin/pip install twine
            env/bin/twine upload -u "$PYPI_USERNAME" -p "$PYPI_PASSWORD" --skip-existing ./dist/*

  deploy-manylinux-32:
    <<: *deploy-manylinux-template
    docker:
      - image: quay.io/pypa/manylinux1_i686

  #
  # deploy macos
  #

  deploy-osx-3.9: &deploy-osx-template
    macos:
      xcode: "12.1.0"

    environment:
      PYTHON: 3.9.0
      MACOSX_DEPLOYMENT_TARGET: 10.9

    steps: 
      - checkout

      - run: *brew-install-pyenv

      - restore_cache: *restore-cache-pyenv

      - run: *pyenv-install-python

      - run: *pyenv-set-system-python

      - save_cache: *save-cache-pyenv

      - restore_cache: *restore-cache-env

      - run: *create-virtualenv

      - run: *install-requirements

      - save_cache: *save-cache-env

      - run: *build-extension

      - run: *build-package

      - store_artifacts:
          path: ./dist

      - run: *upload-template

  deploy-osx-3.8:
    <<: *deploy-osx-template
    environment:
      PYTHON: 3.8.1
      MACOSX_DEPLOYMENT_TARGET: 10.9

  deploy-osx-3.7:
    <<: *deploy-osx-template
    environment:
      PYTHON: 3.7.4
      MACOSX_DEPLOYMENT_TARGET: 10.9

  deploy-osx-3.6:
    <<: *deploy-osx-template
    environment:
      PYTHON: 3.6.5
      MACOSX_DEPLOYMENT_TARGET: 10.9

  deploy-osx-3.5:
    <<: *deploy-osx-template
    environment:
      PYTHON: 3.5.5
      MACOSX_DEPLOYMENT_TARGET: 10.9


workflows:
  version: 2
  test:
    jobs:
      - test-3.9
      - test-3.8
      - test-3.7
      - test-3.6
      - test-3.5
      - test-osx-3.9
      - test-osx-3.8
      - test-osx-3.7
      - test-osx-3.6
      - test-osx-3.5
      - test-docs

  deploy:
    jobs:
      - deploy-manylinux-64:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - deploy-manylinux-32:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - deploy-osx-3.9:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - deploy-osx-3.8:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - deploy-osx-3.7:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - deploy-osx-3.6:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
      - deploy-osx-3.5:
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
