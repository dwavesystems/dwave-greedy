version: 2.1

orbs:
  win: circleci/windows@2.2.0

jobs:

  #
  # linux
  #

  build-manylinux:
    parameters:
      manylinux-tag:
        type: string
      manylinux-arch:
        type: string
      python-version:
        type: string

    docker:
      - image: quay.io/pypa/<< parameters.manylinux-tag >>_<< parameters.manylinux-arch >>

    steps:
      - checkout

      - run:
          name: Build wheels
          command: |
            for py in /opt/python/cp*/bin/python; do
              ver=$("$py" -c 'import sys; print("{0.major}.{0.minor}".format(sys.version_info))')
              req=<< parameters.python-version >>
              [[ "$ver" != "${req:0:3}" ]] && continue
              "$py" -m pip wheel . -w ./wheelhouse --no-deps
            done

      - run:
          name: Bundle shared libraries into wheels
          command: |
            plat="<< parameters.manylinux-tag >>_<< parameters.manylinux-arch >>"
            for whl in ./wheelhouse/*.whl; do
              auditwheel repair "$whl" --plat "$plat" -w ./distotheque
            done

      - store_artifacts: &store-dist
          path: distotheque

      - persist_to_workspace: &persist-dist
          root: distotheque
          paths: .

  build-sdist:
    docker:
      - image: circleci/python:3.9

    steps:
      - checkout

      - run: &build-sdist
          name: Build sdist
          command: |
            python -m venv env
            . env/bin/activate
            pip install -r requirements.txt
            python setup.py sdist -d ./distotheque

      - store_artifacts: *store-dist

      - persist_to_workspace: *persist-dist

  test-linux:
    parameters:
      python-version:
        type: string

    docker:
      - image: circleci/python:<< parameters.python-version >>

    steps:
      - checkout

      - attach_workspace: &attach-dist
          at: distotheque

      - restore_cache: &restore-cache-env
          key: v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: &create-virtualenv
          name: Create virtual environment
          command: |
            python -m venv env

      - run: &install-requirements
          name: Install requirements
          command: |
            env/bin/pip install -r requirements.txt -r tests/requirements.txt

      - save_cache: &save-cache-env
          key: v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}
          paths:
            - env

      - run: &install-package
          name: Install package
          command: |
            env/bin/pip install --no-index --find-links=distotheque dwave-greedy

      - run: &run-python-tests
          name: Run Python tests
          command: |
            . env/bin/activate
            cd tests    # make sure we use the installed package
            coverage run -m unittest discover

      - run: &upload-python-code-coverage
          name: Upload code coverage
          command: |
            . env/bin/activate
            codecov     # calls `coverage xml`, so we must activate venv

      - run: &run-cpp-tests
          name: Run C++ tests
          command: |
            . env/bin/activate
            make -C tests/ smoke

  test-install:
    docker:
      - image: circleci/python:3.7    # last version pip==8.1.0 works on

    steps:
      - checkout

      - attach_workspace: *attach-dist

      - run:
          # pip 10.0 is the first to support pyproject.toml build config
          name: Install from sdist with pip==10.0
          command: |
            python -m venv env-sdist-pip10
            . env-sdist-pip10/bin/activate
            pip install 'pip==10.0'
            pip install ./distotheque/dwave-greedy*.tar.gz

      - run:
          name: Install from sdist with latest pip
          command: |
            python -m venv env-sdist
            . env-sdist/bin/activate
            pip install -U pip
            pip install ./distotheque/dwave-greedy*.tar.gz

      - run:
          # pip 8.1.0 is the first version that supports manylinux1
          name: Install from wheel with pip==8.1.0
          command: |
            python -m venv env-wheel-pip8
            . env-wheel-pip8/bin/activate
            pip install 'pip==8.1.0'
            # TODO: can we search for package locally, but install deps from pypi?
            pip install -r requirements.txt
            pip install --no-index --find-links=distotheque --only-binary=dwave-greedy dwave-greedy

      - run:
          name: Install from wheel with latest pip
          command: |
            python -m venv env-wheel
            . env-wheel/bin/activate
            pip install -U pip
            pip install -r requirements.txt
            pip install --no-index --find-links=distotheque --only-binary=dwave-greedy dwave-greedy

  #
  # macos
  #

  build-macos:
    parameters:
      python-version:
        type: string
      xcode:
        type: string
        default: "12.3.0"

    macos:
      xcode: << parameters.xcode >>

    steps:
      - checkout

      # install `python-version` and cache it
      - run: &brew-install-pyenv
          name: Install pyenv
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew install pyenv
            echo 'eval "$(pyenv init --path)"' >> ~/.bash_profile
            echo 'eval "$(pyenv init -)"' >> ~/.bash_profile

      - restore_cache: &restore-cache-pyenv
          keys:
            - v1-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-<< parameters.xcode >>

      - run: &pyenv-install-python
          name: Install python
          command: |
            pyenv install << parameters.python-version >> -s

      - run: &pyenv-set-system-python
          name: Set system python
          command: |
            pyenv global << parameters.python-version >>

      - save_cache: &save-cache-pyenv
          key: v1-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-<< parameters.xcode >>
          paths:
            - ~/.pyenv

      - run: &build-wheel
          name: Build wheel
          command: |
            python -m venv env
            . env/bin/activate
            pip install -r requirements.txt
            python setup.py bdist_wheel -d ./distotheque

      - store_artifacts: *store-dist

      - persist_to_workspace: *persist-dist

  test-macos:
    parameters:
      python-version:
        type: string
      xcode:
        type: string
        default: "12.3.0"

    macos:
      xcode: << parameters.xcode >>

    steps:
      - checkout

      - run: *brew-install-pyenv

      - restore_cache: *restore-cache-pyenv

      - run: *pyenv-install-python

      - run: *pyenv-set-system-python

      - save_cache: *save-cache-pyenv

      - attach_workspace: *attach-dist

      - restore_cache: *restore-cache-env

      - run: *create-virtualenv

      - run: *install-requirements

      - save_cache: *save-cache-env

      - run: *install-package

      - run: *run-python-tests

      - run: *run-cpp-tests

  #
  # windows
  #

  build-win:
    parameters:
      python-version:
        type: string
      python-arch:
        type: string

    executor:
      name: win/default

    steps:
      - checkout

      - restore_cache: &restore-cache-nuget-python
          keys:
            - v1-nuget-python<< parameters.python-arch >>-<< parameters.python-version >>-{{ .Environment.CIRCLE_JOB }}

      - run: &nuget-install-python
          name: Install python and create virtualenv
          command: |
            nuget install python<< parameters.python-arch >> -Version << parameters.python-version >>

      - save_cache: &save-cache-nuget-python
          key: v1-nuget-python<< parameters.python-arch >>-<< parameters.python-version >>-{{ .Environment.CIRCLE_JOB }}
          paths:
            - python<< parameters.python-arch >>.<< parameters.python-version >>

      - run:
          name: Build wheel
          command: |
            python<< parameters.python-arch >>.<< parameters.python-version >>\tools\python -m venv env
            env\Scripts\activate.ps1
            pip install -r requirements.txt
            python setup.py bdist_wheel -d ./distotheque

      - store_artifacts: *store-dist

      - persist_to_workspace: *persist-dist

  test-win:
    parameters:
      python-version:
        type: string
      python-arch:
        type: string

    executor:
      name: win/default

    steps:
      - checkout

      - restore_cache: *restore-cache-nuget-python

      - run: *nuget-install-python

      - save_cache: *save-cache-nuget-python

      - attach_workspace: *attach-dist

      - restore_cache: *restore-cache-env

      - run:
          name: Install requirements
          command: |
            python<< parameters.python-arch >>.<< parameters.python-version >>\tools\python -m venv env
            env\Scripts\activate.ps1
            pip install -r requirements.txt -r tests/requirements.txt

      - save_cache: *save-cache-env

      - run:
          name: Install package
          command: |
            env\Scripts\activate.ps1
            pip install --no-index --find-links=distotheque dwave-greedy

      - run:
          name: Run Python tests
          command: |
            env\Scripts\activate.ps1
            cd tests
            coverage run -m unittest discover

  #
  # docs
  #

  test-docs:
    docker:
      - image: circleci/python:3.7    # RtD uses py37

    steps:
      - checkout

      - attach_workspace: *attach-dist

      - restore_cache: *restore-cache-env

      - run: *create-virtualenv

      - run: *install-requirements

      - save_cache: *save-cache-env

      - run: *install-package

      - run:
          name: Install docs requirements
          command: |
            env/bin/pip install -r docs/requirements.txt

      - run:
          name: Build docs
          command: |
            . env/bin/activate
            make -C docs/ html

      - store_artifacts:
          path: ./docs/build/html

      - run:
          name: Test docs
          command: |
            . env/bin/activate
            make -C docs/ doctest

      - run:
          name: Test links
          command: |
            . env/bin/activate
            make -C docs/ linkcheck

  #
  # deploy package to PyPI
  #

  pypi-deploy:
    docker:
      - image: circleci/python:3.9

    steps:
      - attach_workspace: *attach-dist

      - run:
          name: Deploy sdist and wheels to PyPI
          command: |
            python -m venv env
            . env/bin/activate
            pip install twine
            twine upload -u $PYPI_USERNAME -p $PYPI_PASSWORD --skip-existing ./distotheque/*


workflows:
  build-test-deploy:
    jobs:
      - build-sdist:
          filters: &always-run  # required because it's indirectly required by the deploy job that runs on tags only
            tags:
              only: /.*/

      - build-manylinux:
          name: build-<< matrix.manylinux-tag >>_<< matrix.manylinux-arch >>-py<< matrix.python-version >>
          matrix:
            parameters:
              manylinux-tag: ["manylinux1", "manylinux2014"]
              manylinux-arch: ["x86_64"]
              python-version: &python-versions ["3.6.8", "3.7.9", "3.8.9", "3.9.4"]
          filters:
            <<: *always-run

      - test-linux:
          name: test-linux-py<< matrix.python-version >>
          requires:
            - build-sdist
            - build-manylinux
          matrix:
            parameters:
              python-version: *python-versions
          filters:
            <<: *always-run

      - test-install:
          requires:
            - build-sdist
            - build-manylinux
          filters:
            <<: *always-run

      - test-docs:
          requires:
            - build-sdist
            - build-manylinux
          filters:
            <<: *always-run

      - build-macos:
          name: build-macos-py<< matrix.python-version >>
          matrix:
            parameters:
              python-version: *python-versions
          filters:
            <<: *always-run

      - test-macos:
          name: test-macos-py<< matrix.python-version >>
          requires:
            - build-sdist
            - build-macos
          matrix:
            parameters:
              python-version: *python-versions
          filters:
            <<: *always-run

      - build-win:
          name: build-win-<< matrix.python-arch >>-py<< matrix.python-version >>
          matrix:
            parameters:
              python-version: *python-versions
              python-arch: &python-archs-win ["", "x86"]
          filters:
            <<: *always-run

      - test-win:
          name: test-win-<< matrix.python-arch >>-py<< matrix.python-version >>
          requires:
            - build-win
          matrix:
            parameters:
              python-version: *python-versions
              python-arch: *python-archs-win
          filters:
            <<: *always-run

      - pypi-deploy:
          requires:
            - test-linux
            - test-macos
            - test-win
            - test-docs
            - test-install
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
